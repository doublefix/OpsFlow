// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: cluster_node.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeManager_AddNode_FullMethodName    = "/api.NodeManager/AddNode"
	NodeManager_UpdateNode_FullMethodName = "/api.NodeManager/UpdateNode"
	NodeManager_DeleteNode_FullMethodName = "/api.NodeManager/DeleteNode"
	NodeManager_Heartbeat_FullMethodName  = "/api.NodeManager/Heartbeat"
)

// NodeManagerClient is the client API for NodeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeManagerClient interface {
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	Heartbeat(ctx context.Context, in *NodeHeartbeatRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type nodeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeManagerClient(cc grpc.ClientConnInterface) NodeManagerClient {
	return &nodeManagerClient{cc}
}

func (c *nodeManagerClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, NodeManager_AddNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, NodeManager_UpdateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, NodeManager_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) Heartbeat(ctx context.Context, in *NodeHeartbeatRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, NodeManager_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManagerServer is the server API for NodeManager service.
// All implementations must embed UnimplementedNodeManagerServer
// for forward compatibility.
type NodeManagerServer interface {
	AddNode(context.Context, *AddNodeRequest) (*GenericResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*GenericResponse, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*GenericResponse, error)
	Heartbeat(context.Context, *NodeHeartbeatRequest) (*GenericResponse, error)
	mustEmbedUnimplementedNodeManagerServer()
}

// UnimplementedNodeManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeManagerServer struct{}

func (UnimplementedNodeManagerServer) AddNode(context.Context, *AddNodeRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedNodeManagerServer) UpdateNode(context.Context, *UpdateNodeRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedNodeManagerServer) DeleteNode(context.Context, *DeleteNodeRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedNodeManagerServer) Heartbeat(context.Context, *NodeHeartbeatRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedNodeManagerServer) mustEmbedUnimplementedNodeManagerServer() {}
func (UnimplementedNodeManagerServer) testEmbeddedByValue()                     {}

// UnsafeNodeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeManagerServer will
// result in compilation errors.
type UnsafeNodeManagerServer interface {
	mustEmbedUnimplementedNodeManagerServer()
}

func RegisterNodeManagerServer(s grpc.ServiceRegistrar, srv NodeManagerServer) {
	// If the following call pancis, it indicates UnimplementedNodeManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeManager_ServiceDesc, srv)
}

func _NodeManager_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeManager_AddNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeManager_UpdateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeManager_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeManager_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).Heartbeat(ctx, req.(*NodeHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeManager_ServiceDesc is the grpc.ServiceDesc for NodeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NodeManager",
	HandlerType: (*NodeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _NodeManager_AddNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _NodeManager_UpdateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NodeManager_DeleteNode_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _NodeManager_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster_node.proto",
}
